pipeline {
    agent any

    environment {
        // Define environment variables
        EC2_USER = 'ubuntu'                        // EC2 user
        EC2_HOST = '54.80.52.187'                  // EC2 host IP
        APP_PORT = '8080'                          // Application port
        SSH_KEY_PATH = '/var/lib/jenkins/.ssh/jenkins_ssh_key' // Correct path to the SSH private key
        APP_JAR_NAME = 'oauth-service-0.0.1-SNAPSHOT.jar' // Correct JAR file name from the Maven build
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id') // AWS Access Key ID (Jenkins credentials)
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key') // AWS Secret Access Key (Jenkins credentials)

        // Set JAVA_HOME to the correct Java 17 path
        JAVA_HOME = '/usr/lib/jvm/java-17-openjdk-amd64'
        MAVEN_HOME = '/usr/share/maven'
        PATH = "${JAVA_HOME}/bin:${MAVEN_HOME}/bin:${env.PATH}"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', 
                    credentialsId: 'github_credentials',  // Make sure this credential is set up in Jenkins
                    url: 'https://github.com/Kem123123/oauth-service.git'  // Update this to your repository
            }
        }

        stage('Build Application') {
            steps {
                // Build the application with Maven, skipping tests for faster builds
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Archive Artifact') {
            steps {
                // Archive the JAR file to make it available for other stages if needed
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

        stage('Deploy to EC2') {
            steps {
                // Deploy the application to EC2, handling spaces in the JAR file name
                sh """
                scp -o StrictHostKeyChecking=no -i ${SSH_KEY_PATH} 'target/${APP_JAR_NAME}' ${EC2_USER}@${EC2_HOST}:/home/ubuntu/'${APP_JAR_NAME}'
                ssh -o StrictHostKeyChecking=no -i ${SSH_KEY_PATH} ${EC2_USER}@${EC2_HOST} "nohup java -jar /home/ubuntu/'${APP_JAR_NAME}' > /home/ubuntu/app.log 2>&1 &"
                """
            }
        }
    }

    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}
