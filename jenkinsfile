pipeline {
    agent any

    environment {
        // Define environment variables
        JAVA_HOME = '/usr/lib/jvm/java-21-openjdk'
        MAVEN_HOME = '/usr/share/maven'
        PATH = "${JAVA_HOME}/bin:${MAVEN_HOME}/bin:${env.PATH}"
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key') 
        EC2_USER = 'ubuntu'                        // EC2 username
        EC2_HOST = '52.20.211.65'                  // EC2 instance IP
        APP_PORT = '8080'                          // Application port
        SSH_KEY_CREDENTIALS_ID = 'jenkins_ssh_key' // SSH key ID stored in Jenkins credentials
        APP_JAR_NAME = 'spring-boot-starter-parent-3.1.2.jar' // JAR file name
        IMAGE_NAME = 'spring-boot-app'             // Docker image name
        IMAGE_TAG = 'latest'                       // Docker image tag
        AWS_CREDENTIALS_ID = 'aws-credentials'    // Jenkins AWS credentials ID
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from GitHub
                checkout scm
            }
        }

        stage('Build Application') {
            steps {
                // Build the Spring Boot application with Maven
                sh 'mvn clean package -DskipTests'
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Build Docker image
                    sh 'docker build -t ${IMAGE_NAME}:${IMAGE_TAG} .'
                }
            }
        }

        stage('Archive Artifact') {
            steps {
                // Archive the JAR file for later use
                archiveArtifacts artifacts: 'target/*.jar', fingerprint: true
            }
        }

        stage('Deploy to EC2') {
            steps {
                // Use AWS credentials to configure AWS CLI
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: AWS_CREDENTIALS_ID]]) {
                    // Deploy application via Docker
                    sh """
                    scp -o StrictHostKeyChecking=no target/${APP_JAR_NAME} ${EC2_USER}@${EC2_HOST}:/home/ubuntu/${APP_JAR_NAME}
                    ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} "docker run -d -p ${APP_PORT}:${APP_PORT} --name ${IMAGE_NAME} ${IMAGE_NAME}:${IMAGE_TAG}"
                    """

                    // Alternatively, deploy the JAR directly (without Docker)
                    // Uncomment below lines to deploy directly via SSH
                    // sh """
                    // scp -o StrictHostKeyChecking=no target/${APP_JAR_NAME} ${EC2_USER}@${EC2_HOST}:/home/ubuntu/${APP_JAR_NAME}
                    // ssh -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_HOST} "nohup java -jar /home/ubuntu/${APP_JAR_NAME} > /dev/null 2>&1 &"
                    // """
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed.'
        }
        always {
            echo 'Pipeline execution completed.'
        }
    }
}
